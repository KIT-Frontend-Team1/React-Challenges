/*
장점:

성능 최적화
    useMemo를 사용하여 계산 비용이 많은 작업의 결과 값을 메모이제이션하면, 
    의존성이 변경되지 않는 한 이전에 계산된 값을 재사용할 수 있습니다. 
    이를 통해 불필요한 연산을 줄이고 성능을 향상시킬 수 있습니다.

불필요한 렌더링 방지
    useMemo를 사용하여 값을 메모이제이션하면,
    의존성이 변경되지 않는 한 컴포넌트의 리렌더링을 방지할 수 있습니다.
    값이 변경되지 않았다면 해당 값을 재사용하여 불필요한 컴포넌트 재렌더링을 방지할 수 있습니다.

단점:

메모이제이션 오버헤드
    useMemo를 사용하면 값을 메모이제이션하여 저장해야 하므로 약간의 오버헤드가 발생할 수 있다. 
    작업의 복잡성에 따라 메모리 사용량도 증가할 수 있다. 
    따라서 메모리 사용량과 성능 간의 균형을 고려해야 함.
남용 시 복잡성 증가
    useMemo를 남용하면 코드의 복잡성이 증가할 수 있다.
    모든 계산이 메모이제이션된 값으로 이루어지면 코드의 가독성이 저하될 수 있다.
    따라서 적절한 상황에서 사용해야 함
*/
import React, { useMemo } from 'react';

const UseMemo = ({ num }) => {
    const squaredValue = useMemo(() => {
        return num ** 2;
    }, [num]);

    return (
        <div>
            <p>
                The square of {num} is: {squaredValue}
            </p>
        </div>
    );
};

export default UseMemo;
