리액트의 장점
1. Virtual DOM
- 리액트에서 어떤 상태값이 변경되어 업데이트 되면 이전 가상 돔 트리와 새로운 가상 돔 트리를 비교 후 변경된 요소들만 찾아 실제 DOM에 업데이트 하므로, 이 경우 DOM은 변경된 부분의 업데이트를 한 번만 하면 되고 리렌더링도 한 번만 하게 되어 변경사항이 있을 때마다 브라우저 렌더과정을 거쳐야하는 DOM 조작에 비해 효율적

2. Components
- DOM 모델은 트리 형태로 표현되는 구조로 상위 노드가 하위 노드를 포함하는 형태다. 화면에 요소가 많아질수록 중첩 구조가 복잡해서 가독성이나 재사용성, 변경의 용이함 등이 떨어지게 된다. 
- 리액트에서 컴포넌트화를 하게되면 중첩된 복잡한 구조를 하나의 컴포넌트로 쪼개 나누어 각 컴포넌트는 어떤 기능을 하는지 알기 쉽고(가독성), 화면의 여러 부분 중 원하는 곳에 재사용을 할 수 있다는 장점이 있다.

3. 프레임워크가 아닌 라이브러리, js 문법을 그대로 사용
- 이미 정해진 기능 내에서 사용해야하는 프레임워크와 달리 라이브러리는 사용자가 필요할 때마다 부분적 사용이 가능하고, 프레임워크는 프레임워크가 지정해주는 문법에 따라 작성해야하지만 라이브러리인 자바스크립트는 js 문법으로 자유롭게 개발할 수 있다는 점

ex) 자바스크립트의 삼항연산자나 && 연산자를 사용하여 조건에 따라 뷰단에 보이게 하거나 안보이도록 제어할 수 있다.
// && 연산자 방식
<div>
	{isVisible && <button>조건에 따라 사라질 버튼</button>}
</div>

// 삼항 연산자 방식
<div>
	{isVisible ? <button>조건에 따라 사라질 버튼</button> : null}
</div>


4. 라이브러리 사용으로 빠르게 개발할 수 있어 효율적
- react-router-dom
- styled-components
- styled-reset
- fontawesome


리액트의 단점
1. Virtual DOM의 단점
- 일부 작업에서는 오히려 비효율적이다
: 애니메이션 등 빠른 업데이트가 필요한 작업은 가상 돔을 사용하지 않는 것이 더 낫다.
- Virtual DOM은 객체를 따로 관리하므로 메모리 사용량이 늘어나는 단점이 있다.

2. Components를 하나하나 나누는 것은 처음 접근하는 개발자에게 복잡하고 이해하기 어려울 수 있다.

3. js 기반의 jsx문법을 사용하는데 이것 또한 익숙치 않은 개발자에게 러닝 커브가 높을 수 있다.

4. 리액트는 라이브러리이기 때문에 라우팅, 상태 관리 등의 기능이 없으므로 추가 라이브러리를 사용하는 것이 오히려 단점이라고 볼 수 있다.