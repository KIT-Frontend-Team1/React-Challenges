2. useRef
- 저장공간 또는 DOM요소에 접근하기 위해 사용되는 리액트 hook이다.Ref는 reference(참조)를 뜻한다.

기본 형태는 이러하다
const ref = useRef(initialValue)
=> useRef를 부르면 ref object를 반환해준다
{ current: value } // 초기값은 current에 저장
=> 언제든 원하는 값으로 변경 가능
=> ref.current = 'yeseul' -> { current: 'yeseul' }

이 useRef는 언제 사용하는가?
1) 변화는 감지하나 그 변화가 렌더링을 발생시키면 안되는 값을 다룰 때
-> 데이터 저장은 필요하다 리렌더링이 필요하지 않은 경우. 렌더링이 될 때만 변화값을 UI에 나타내고 싶을 때
2) DOM 요소에 직접 접근해야할 때, 컴포넌트의 속성만 조회&수정할 때
ex) 컴포넌트에 input 요소를 클릭하지 않아도 focus를 위치시킬 때, 요소의 크기를 가져오거나 스타일 변경할 때

useRef의 장점은?
1) 변수 관리에 용이, 성능 향상
- 컴포넌트에서 자주 바뀌는 값을 state에 넣어놨을 때를 가정한다면, 그 값이 바뀔 때마다 계속 렌더링이 되는데 성능에 안좋은 영향이 미칠 수 있다.
- 여기서 ref를 사용한다면 그 값이 아무리 바뀌어도 렌더링을 발생시키지 않으므로 성능향상에 좋다. 변경된 값은 렌더링이 될 때만 UI에 나타난다.

2) 가상 DOM에서 접근하여 UI 업데이트에 최적화할 수 있다
- 실제 DOM에서 querySelector를 사용한다면 변경사항이 있을 때마다 화면을 리렌더링 하므로 비효율적인 단점이 있었다. 리액트의 useRef를 사용하여 가상 돔에 접근하면 변경된 부분만 비교하고, 여러 변경 사항을 한번에 처리해 실제 돔에 한번에 적용시킴으로써  UI 업데이트를 최적화할 수 있다.

useRef의 단점은?
1) 복잡한 로직에서 사용이 어려움
- 간단한 용도로 주로 사용하기 때문에 복잡한 로직에서 사용하기에는 적합하지 않을 수 있다.
2) 컴포넌트 라이프 사이클을 대체할 수 없다.
- useRef로 컴포넌트 생애주기와 관련된 작업을 수행하는 것은 좋지 않다.
- 이때 useEffect 와 같은 다른 훅을 사용하여 처리하게 된다.